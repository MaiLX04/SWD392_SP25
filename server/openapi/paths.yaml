openapi: 3.0.3
info:
  title: Accessories Buying And Blindbox Trading
  description: |-
    **This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about**
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: bathangzed@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000
tags:
  - name: users
    description: Operations about user 
paths:   
  /user/login:
    post:
      tags:
        - users
      summary: Login
      description: Login into system
      operationId: login
      requestBody:
        description: Login's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login successfully! 
          content:
            application/json:
              schema:
               type: object
               properties:
                 message: 
                  type: string
                  example: Login Success
                 result: 
                  $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Email or password is incorrect
  /user/{id}:
    get:
      tags:
        - users
      summary: Get User Profile
      description: Get User Profile
      operationId: getProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get User Profile Successfully!
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error!
          content:
            application/json:
              schema:
               type: object
               properties:
                 message: 
                  type: string
                  example: input must be a 24 character hex string, 12 byte Uint8Array, or an integer       
