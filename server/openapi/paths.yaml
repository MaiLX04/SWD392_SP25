openapi: 3.0.3
info:
  title: Accessories Buying And Blindbox Trading
  description: |-
    **This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about**
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: bathangzed@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3000
tags:
  - name: users
    description: Operations about user 
paths:   
  /user/register:
    post:
      tags:
        - users
      summary: Register a new user
      description: Create a new user account
      operationId: registerUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Bá Thắng 6
                email:
                  type: string
                  format: email
                  example: bathangzed6@gmail.com
                password:
                  type: string
                  format: password
                  example: Thangdeptrai2004@6
                confirmed_password:
                  type: string
                  format: password
                  example: Thangdeptrai2004@6
                date_of_birth:
                  type: string
                  format: date-time
                  example: 2004-03-17T17:00:00.000+00:00
              required:
                - name
                - email
                - password
                - confirmed_password
                - date_of_birth
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register Successfully
                  id:
                    type: object
                    properties:
                      acknowledged:
                        type: boolean
                        example: true
                      insertedId:
                        type: string
                        format: MongoId
                        example: 67d0f2d6d579115d2f9c11f8
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error
                  errors:
                    type: object
                    description: Object containing validation errors for each field
                    example:
                      name: Name is required
                    # or
                    # email: Email is required

  /user/login:
    post:
      tags:
        - users
      summary: Login
      description: Login into system
      operationId: login
      requestBody:
        description: Login's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login successfully! 
          content:
            application/json:
              schema:
               type: object
               properties:
                 message: 
                  type: string
                  example: Login Success
                 result: 
                  $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Email or password is incorrect
  /user/{id}:
    get:
      tags:
        - users
      summary: Get User Profile
      description: Get User Profile
      operationId: getProfile
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get User Profile Successfully!
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error!
          content:
            application/json:
              schema:
               type: object
               properties:
                 message: 
                  type: string
                  example: input must be a 24 character hex string, 12 byte Uint8Array, or an integer   
  /offer:
    post:
      tags:
        - offers
      summary: Create an offer
      description: Create a new offer for a trade request
      operationId: createOffer
      requestBody:
        description: Offer details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferCreateRequestBody' # Reference the schema
        required: true
      responses:
        '201':
          description: Offer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferCreateSuccessResponse' # Reference the schema
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferCreateBadRequestResponse' # Reference the schema
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferCreateInternalServerErrorResponse' # Reference the schema
    get:
      tags:
        - offers
      summary: Get all offers
      description: Retrieve a list of all offers
      operationId: getAllOffers
      responses:
        '200':
          description: A list of offers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer' # Reference the Offer schema
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error getting all offers            
  /offer/{offerId}:
    get:
      tags:
        - offers
      summary: Get offer by ID
      description: Retrieve an offer by its ID
      operationId: getOfferById
      parameters:
        - name: offerId
          in: path
          description: ID of the offer to retrieve
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        '200':
          description: Offer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer' # Reference the Offer schema
        '404':
          description: Offer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Offer not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error getting offer by ID
  /offer/request/{requestId}:
    get:
      tags:
        - offers
      summary: Get all offers by request ID
      description: Retrieve a list of all offers for a specific request
      operationId: getAllOffersByRequestId
      parameters:
        - name: requestId
          in: path
          description: ID of the request to retrieve offers for
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        '200':
          description: A list of offers for the specified request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer' # Reference the Offer schema
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error getting offers by request ID  
  /offer/{id}:
    put:
      tags:
        - offers
      summary: Update an offer
      description: Update an existing offer by its ID
      operationId: updateOffer
      parameters:
        - name: id
          in: path
          description: ID of the offer to update
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Updated offer details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfferUpdateRequestBody' # Reference the OfferUpdateRequestBody schema
        required: true
      responses:
        '200':
          description: Offer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer' # Reference the Offer schema (updated)
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error
                  errors:
                    type: object
                    description: Object containing validation errors for each field
                    example:
                      offerItem: "Offer item is required"
        '404':
          description: Offer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Offer not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error updating offer
  /offer/{offerId}/status/{offerStatus}:
    patch:
      tags:
        - offers
      summary: Update offer status
      description: Update the status of an existing offer
      operationId: updateOfferStatus
      parameters:
        - name: offerId
          in: path
          description: ID of the offer to update
          required: true
          schema:
            type: string
            format: MongoId
        - name: offerStatus
          in: path
          description: New status of the offer
          required: true
          schema:
            type: string
            enum:
              - "Pending"
              - "Accepted"
              - "Declined"
              - "Completed"
            example: "Accepted"
      responses:
        '200':
          description: Offer status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer' # Reference the Offer schema (updated)
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation error
                  errors:
                    type: object
                    description: Object containing validation errors for each field
                    example:
                      offerStatus: "Offer status is required"
        '404':
          description: Offer not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Offer not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error updating offer status
  /accessory:
    post:
      tags:
        - accessories
      summary: Post a new accessory
      description: Create a new accessory
      operationId: postAccessories
      requestBody:
        description: Accessory details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessoryCreateRequestBody'
        required: true
      responses:
        '201':
          description: Accessory created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessoryCreateResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error creating accessory" 
  /category:
    post:
      tags:
        - categories
      summary: Create a new accessory category
      description: Create a new category for accessories
      operationId: createAccessoryCategory
      requestBody:
        description: Category details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequestBody'
        required: true
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                    example: true
                  insertedId:
                    type: string
                    format: MongoId
                    example: "67d0f2d6d579115d2f9c11f8"
        '400':
          description: Bad Request - Category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category already exists"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error creating category"
  /accessories:
    get:
      tags:
        - accessories
      summary: Get all accessories
      description: Retrieve a list of all accessories
      operationId: getAllAccessories
      responses:
        '200':
          description: A list of accessories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accessory'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error getting all accessories"
  /categories:
    get:
      tags:
        - categories
      summary: Get all accessory categories
      description: Retrieve a list of all accessory categories
      operationId: getAllCategories
      responses:
        '200':
          description: A list of accessory categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error getting all categories"     
  /accessories/{id}:
    get:
      tags:
        - accessories
      summary: Get accessory by ID
      description: Retrieve a single accessory by its ID
      operationId: getAccessoryById
      parameters:
        - name: id
          in: path
          description: ID of the accessory to retrieve
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        '200':
          description: The requested accessory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accessory'
        '404':
          description: Accessory not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accessory not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error getting accessory"
    put:
      tags:
        - accessories
      summary: Update an accessory
      description: Update an existing accessory by its ID
      operationId: updateAccessory
      parameters:
        - name: id
          in: path
          description: ID of the accessory to update
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Updated accessory details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessoryUpdateRequestBody'
        required: true
      responses:
        '200':
          description: Accessory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accessory'
        '404':
          description: Accessory not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Accessory not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error updating accessory"

  /categories/{id}:
    get:
      tags:
        - categories
      summary: Get category by ID
      description: Retrieve a single category by its ID
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          description: ID of the category to retrieve
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        '200':
          description: The requested category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error getting category"
    put:
      tags:
        - categories
      summary: Update a category
      description: Update an existing category by its ID
      operationId: updateCategory
      parameters:
        - name: id
          in: path
          description: ID of the category to update
          required: true
          schema:
            type: string
            format: MongoId
      requestBody:
        description: Updated category details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequestBody'
        required: true
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category not found"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error updating category"                                                                                   

